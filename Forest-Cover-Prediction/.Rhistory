lapply(s[c[,4]],mean)
sapply(s,function(x) colMeans(x[,c("hp")]))
sapply(s,function(x) mean(x[,c("hp")]))
s
s<-split(mtcars,mtcars$cyl)
a<-sapply(s,function(x) mean(x[,c("hp")]))
a
colname(a)
colnames(a)
a$4
a[1]
a[3]-a[1]
length(a)
which(names(a)==4)
which(names(a)==8)
tapply(iris$species,mean)
?iris
tapply(iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
iris[,"Species"]
iris[1,"Species"]
iris[1,iris$species]
iris[,4]
iris
iris[1]
iris[1,]
s
a<-sapply(s,function(x) mean(x[,"hp"]))
a
a[3]-a[1]
savehistory("C:/Users/deepsidhpura777/Desktop/R/Quiz 3.Rhistory")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo = 11,bar =2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE==TRUE)==FALSE
6==7
6 <7
10<=10
5 != 7
!(5 == 7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6!=8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
cls_vector
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flags_colors)
head(flag_colors)
lappy(flag_colors,sum)
lapply(flag_colors,sum)
sum(flag_colors)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flags_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
taplly(flags$population,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,repalce=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
filps<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100,prob=0,7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
flips2 <- rbinom(100,size=2,prob=0.7)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quaters(t2)
quarters(t2)
t3<-"October 17,1986 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",xlab='Speed,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
play()
nxt(0)
play()
nxt()
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab='Speed,ylab="Stopping Distance")
nxt()
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",subtitle="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
?hist
load("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/.RData")
table(submission)
head(submission)
rm(submission)
class(newTrain$Wild)
newTrain$Wild <- as.factor(newTrain$Wild)
newTest$Wild <- as.factor(newTest$Wild)
newTrain$Soil <- as.factor(newTrain$Soil)
newTest$Soil <- as.factor(newTest$Soil)
grid <-expand.grid(
n.trees = c(250),
interaction.depth = c(22) ,
shrinkage = 0.2)
library(caret)
gfModel <- train(formula,data=newTrain,method="gbm",trControl=fitControl,tuneGrid=grid,metric="ROC")
gfPred <- predict(gfModel, newdata = newTest[,x_vars])
table(gfPred)
table(prediction)
submit <- data.frame(Id=test$Id,Cover_Type=gfPred)
setwd("C:/Users/deepsidhpura777/Desktop/R/Forest Cover")
write.csv(submit, "GF3.csv", row.names=FALSE)
summary(newTrain)
avgDist <- mean(newTrain[,4] + newTrain[,5])
avgDist <- newTrain[,4] + newTrain[,5]
avgDist <- avgDist / 2
newTrain[1,]
newTrain$AvgDist <- avgDist
avgDist <- newTest[,4] + newTest[,5]
avgDist <- avgDist / 2
newTest$AvgDist <- avgDist
avgShade <- newTrain[,7]+newTrain[,8]+newTrain[,9]
avgShade <- avgShade / 3
newTrain$AvgShade <- avgShade
avgShade <- newTest[,7]+newTest[,8]+newTest[,9]
avgShade <- avgShade / 3
newTest$AvgShade <- avgShade
summary(newTrain)
grid <-expand.grid(
n.trees = c(200),
interaction.depth = c(22) ,
shrinkage = 0.2)
gfModel <- train(formula,data=newTrain,method="gbm",trControl=fitControl,tuneGrid=grid,metric="ROC")
x_vars = setdiff(names(newTrain),c("Cover_Type"))
x_vars
gfPrediction <- predict(gfModel,newdata=newtest[,x_vars])
gfPrediction <- predict(gfModel,newdata=newTest[,x_vars])
table(gfPrediction)
table(predcition)
table(prediction)
submit <- data.frame(Id=test$Id,Cover_Type=gfPrediction)
write.csv(submit, "GF4.csv", row.names=FALSE)
summary(newTrain)
newTrain$AvgDist <- NULL
newTrain$AvgShade <- NULL
newTest$AvgDist <- NULL
newTest$AvgShade <- NULL
summary(newTrain)
scTrain <- scale(newTrain[,1:10])
scTest <- scale(newTest[,1:10])
summary9scTrain
summary(scTrain)
nrow(scTrain)
ncol(scTrain)
scTrain <- cbind(scTrain,newTrain[,11:20])
scTest <- cbind(scTest,newTest[,11:20])
nrow(scTest)
ncol(scTest)
gfModel <- train(formula,data=scTrain,method="gbm",trControl=fitControl,tuneGrid=grid,metric="ROC")
gfPrediction <- predict(gfModel,newdata=newTest[,x_vars])
x_vars
x_vars$AvgDist <- NULL
x_vars
x_vars = setdiff(names(newTrain),c("Cover_Type"))
gfPrediction <- predict(gfModel,newdata=newTest[,x_vars])
table(gfPrediction)
gfPrediction <- predict(gfModel,newdata=scTest[,x_vars])
table(gfPrediction)
table(prediction)
submit <- data.frame(Id=test$Id,Cover_Type=gfPrediction)
write.csv(submit, "GF5.csv", row.names=FALSE)
summary(newTrain)
hist(newTrain[,4])
hist(newTrain[,1:10])
hist(newTrain[,1])
hist(newTrain[,2])
hist(newTrain[,1:4])
par(mfrow=c(5, 2))
for (i in 1:10) {
hist(newTrain[,i], probability=TRUE, col="gray", border="white")
}
par(mfrow=c(2, 5))
for (i in 1:10) {
hist(newTrain[,i], probability=TRUE, col="gray", border="white")
}
x_vars
graphNames <- colnames(newTrain)[1:10]
par(mfrow=c(2, 5))
for (i in 1:10) {
hist(newTrain[,i], probability=TRUE, col="gray", border="white",main=colnames[i])
}
par(mfrow=c(2, 5))
for (i in 1:10) {
hist(newTrain[,i], probability=TRUE, col="gray", border="white",main=graphNames[i])
}
Highwater <- newTrain[newTrain[,5] < 0]
cond <- newTrain[,5] < 0
Highwater <- newTrain[cond]
Highwater <- newTrain[cond,]
Highwater <- newTrain[cond,5]
Highwater <- cond
class(Highwater)
Highwater <- as.factor(cond)
newTrain$Highwater <- Highwater
cond <- newTest[,5] < 0
Highwater <- as.factor(cond)
newTest$Highwater <- Highwater
summary(nweTrain)
summary(newTrain)
sqrt(4)
2^2
HydroDist <- sqrt(newTrain[,4]^2 + newTrain[,5]^2)
newTrain$HydroDist <- HydroDist
HydroDist <- sqrt(newTest[,4]^2 + newTest[,5]^2)
newTest$HydroDist <- HydroDist
newTrain(summary)
summary(newTrain[,9])
summary(newTest[,9])
summary(newTrain)
HydroRoad1 <- newTrain[,4] + newTrain[,6]
newTrain$HydroRoad1 <- HydroRoad1
HydroRoad1 <- newTest[,4] + newTest[,6]
newTest$HydroRoad1 <- HydroRoad1
rm(scTest)
rm(scTrain)
abs(4-6)
HydroRoad2 <- abs(newTrain[,4]-newTrain[,6])
newTrain$HydroRoad2 <- HydroRoad2
HydroRoad2 <- abs(newTrain[,4]-newTrain[,6])>newTrain$HydroRoad2 <- HydroRoad2
HydroRoad2 <- abs(newTest[,4]-newTest[,6])
newTest$HydroRoad2 <- HydroRoad2
HydroFire1 <- newTrain[,4] + newTrain[,10]
newTrain[1,4] + newTrain[1,10]
newTrain$HydroFire1 <- HydroFire1
HydroFire1 <- newTest[,4] + newTest[,10]
newTest$HydroFire1 <- HydroFire1
HydroFire2 <- abs(newTrain[,4] - newTrain[,10])
newTrain$HydroFire2 <- HydroFire2
HydroFire2 <- abs(newTest[,4] - newTest[,10])
newTest$HydroFire2 <- HydroFire2
RoadFire1 <- newTrain[,6]+newTrain[,10]
newTrain$RoadFire1 <- RoadFire1
RoadFire1 <- newTest[,6]+newTest[,10]
newTest$RoadFire1 <- RoadFire1
RoadFire2 <- abs(newTrain[,6]-newTrain[,10])
newTrain$RoadFire2 <- RoadFire2
RoadFire2 <- abs(newTest[,6]-newTest[,10])
newTest$RoadFire2 <- RoadFire2
formula
summary(newTrain)
formula <- as.factor(Cover_Type) ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil + Highwater+HydroDist+HydroRoad1+HydroRoad2+HydroFire1+HydroFire2+RoadFire1+RoadFire2
formula
x_vars = setdiff(names(train),c("Cover_Type"))
x_vars
x_vars = setdiff(names(newTrain),c("Cover_Type"))
x_vars
gbmModel <- train(formula,data = newTrain,method = "gbm",trControl = fitControl,
tuneGrid = grid,
metric = "ROC")
gbmPrediction <- predict(gbmModel,newdata=newTest[,x_vars])
table(gbmPrediction)
table(prediction)
submit <- data.frame(Id=test$Id,Cover_Type=gbmPrediction)
write.csv(submit,"GBM.csv",row.names=FALSE)
which(newTrain[,9]==0)
which(newTest[,9]==0)
empty <- which(newTrain[,9]==0)
meanShade <- mean(newTrain[,9])
newTrain[empty,9] <- meanShade
empty <- which(newTest[,9]==0)
meanShade <- mean(newTest[,9])
newTest[empty,9] <- meanShade
which(newTrain[,9]==0)
grid <-  expand.grid(
n.trees = c(500),
interaction.depth = c(22) ,
shrinkage = 0.2)
set.seed(1805)
gbmModel <- train(formula,data = newTrain,method = "gbm",trControl = fitControl,
tuneGrid = grid,
metric = "ROC")
gbmPrediction <- predict(gbmModel,newdata=newTest[,x_vars])
table(gbmPrediction)
submit <- data.frame(Id=test$Id,Cover_Type=gbmPrediction)
write.csv(submit,"GBM2.csv",row.names=FALSE)
grid <-  expand.grid(
n.trees = c(350),
interaction.depth = c(22) ,
shrinkage = 0.2)
set.seed(1805)
gbmModel <- train(formula,data = newTrain,method = "gbm",trControl = fitControl,
tuneGrid = grid,
metric = "ROC")
gbmPrediction <- predict(gbmModel,newdata=newTest[,x_vars])
submit <- data.frame(Id=test$Id,Cover_Type=gbmPrediction)
write.csv(submit,"GBM3.csv",row.names=FALSE)
summary(newTrain)
Hillshade <- newTrain[,7]+newTrain[,8]+newTrain[,9]
newTrain$Hillshade <- Hillshade
Hillshade <- newTest[,7]+newTest[,8]+newTest[,9]
newTest$Hillshade <- Hillshade
x_vars = setdiff(names(newTrain),c("Cover_Type"))
grid <-  expand.grid(
n.trees = c(500),
interaction.depth = c(22) ,
shrinkage = 0.2)
gbmModel <- train(formula,data = newTrain,method = "gbm",trControl = fitControl,
tuneGrid = grid,
metric = "ROC")
x_vars = setdiff(names(newTrain),c("Cover_Type"))
formula
forest <- as.factor(Cover_Type) ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil + Highwater + HydroDist + HydroRoad1 + HydroRoad2 +
HydroFire1 + HydroFire2 + RoadFire1 + RoadFire2 + Hillshade
summary(newTrain)
formula
formula <- as.factor(Cover_Type) ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil + Highwater + HydroDist + HydroRoad1 + HydroRoad2 +
HydroFire1 + HydroFire2 + RoadFire1 + RoadFire2 + Hillshade
formula
colnames(newTrain)
formula
gbmModel <- train(formula,data = newTrain,method = "gbm",trControl = fitControl,
tuneGrid = grid,
metric = "ROC")
gbmPrediction <- predict(gbmModel,newdata=newTest[,x_vars])
table(gbmPrediction)
table(prediction)
submit <- data.frame(Id=test$Id,Cover_Type=gbmPrediction)
write.csv(submit,"GBM4.csv",row.names=FALSE)
savehistory("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/LatHist.Rhistory")
save.image("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/LatEnv.RData")
summary(newtrain)
summary(newTrain)
