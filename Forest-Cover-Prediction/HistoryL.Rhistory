apply(c,2,mean)
split(c,c$cyl)
with(c,tapply(mpg,cyl,mean))
tapply(mpg,cyl,mean)
a<-with(c,tapply(hp,cyl,mean))
a
colnames(a)
f1<-c["cyl"==4]
f2<-c["cyl"==8]
split(c,f1)
f1
c[c[,4]==4]
c[c[,2]==4]
s<-split(c,c$cyl)
s[1]
s[[1],2]
s[[1,2]]
[s[1],4]
s[1]$hp
s[1]$mpg
s[[c(1,4)]]
lapply(s,mean)
s
lapply(s[c[,4]],mean)
sapply(s,function(x) colMeans(x[,c("hp")]))
sapply(s,function(x) mean(x[,c("hp")]))
s
s<-split(mtcars,mtcars$cyl)
a<-sapply(s,function(x) mean(x[,c("hp")]))
a
colname(a)
colnames(a)
a$4
a[1]
a[3]-a[1]
length(a)
which(names(a)==4)
which(names(a)==8)
tapply(iris$species,mean)
?iris
tapply(iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
iris[,"Species"]
iris[1,"Species"]
iris[1,iris$species]
iris[,4]
iris
iris[1]
iris[1,]
s
a<-sapply(s,function(x) mean(x[,"hp"]))
a
a[3]-a[1]
savehistory("C:/Users/deepsidhpura777/Desktop/R/Quiz 3.Rhistory")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo = 11,bar =2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE==TRUE)==FALSE
6==7
6 <7
10<=10
5 != 7
!(5 == 7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6!=8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
cls_vector
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flags_colors)
head(flag_colors)
lappy(flag_colors,sum)
lapply(flag_colors,sum)
sum(flag_colors)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flags_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
taplly(flags$population,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,repalce=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
filps<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100,prob=0,7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
flips2 <- rbinom(100,size=2,prob=0.7)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quaters(t2)
quarters(t2)
t3<-"October 17,1986 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",xlab='Speed,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
play()
nxt(0)
play()
nxt()
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab='Speed,ylab="Stopping Distance")
nxt()
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",subtitle="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
?hist
load("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/workSpace.RData")
newCol <- data.frame(C1 =(newTrain$Cover_Type==1))
newTrain <- cbind(newTrain,newCol)
newCol <- data.frame(C1 =(newTrain$Cover_Type==2))
newTrain <- cbind(newTrain,newCol)
load("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/workSpace.RData")
summary(newTrain)
newCol <- data.frame(C1=(newTrain$Cover_Type==1))
newTrain <- cbind(newTrain,newCol)
newCol <- data.frame(C2=(newTrain$Cover_Type==2))
newTrain <- cbind(newTrain,newCol)
newCol <- data.frame(C3=(newTrain$Cover_Type==3))
newTrain <- cbind(newTrain,newCol)
newCol <- data.frame(C4=(newTrain$Cover_Type==4))
newTrain <- cbind(newTrain,newCol)
newCol <- data.frame(C5=(newTrain$Cover_Type==5))
newTrain <- cbind(newTrain,newCol)
newCol <- data.frame(C6=(newTrain$Cover_Type==6))
newTrain <- cbind(newTrain,newCol)
newCol <- data.frame(C7=(newTrain$Cover_Type==7))
newTrain <- cbind(newTrain,newCol)
summary(newTrain)
newCol <- data.frame(C1=(newTest$Cover_Type==1))
newTest <- cbind(newTest,newCol)
newCol <- data.frame(C2=(newTest$Cover_Type==2))
newTest <- cbind(newTest,newCol)
newCol <- data.frame(C3=(newTest$Cover_Type==3))
newTest <- cbind(newTest,newCol)
newCol <- data.frame(C4=(newTest$Cover_Type==4))
newTest <- cbind(newTest,newCol)
newCol <- data.frame(C5=(newTest$Cover_Type==5))
newTest <- cbind(newTest,newCol)
newCol <- data.frame(C6=(newTest$Cover_Type==6))
newTest <- cbind(newTest,newCol)
newCol <- data.frame(C7=(newTest$Cover_Type==7))
newTest <- cbind(newTest,newCol)
summary(newTest)
newTest[1,1]
newTrain[1,]
train[1,]
formula <- C1+C2+C3+C4+C5+C6+C7~Elevation+Aspect+Slope+Horizontal_Distance_To_Hydrology+Vertical_Distance_To_Hydrology+Horizontal_Distance_To_Roadways+Hillshade_9am+Hillshade_Noon+Hillshade_3pm+Horizontal_Distance_To_Fire_Points+Wild+Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="multinomial")
library(gbm)
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="multinomial")
summary(newTrain)
colnames(newTrain)[14] <- isOne
colnames(newTrain)[14] <- "isOne"
summary(newTrain)
colnames(newTrain)[15] <- "isTwo"
colnames(newTrain)[16] <- "isThree"
colnames(newTrain)[17] <- "isFour"
colnames(newTrain)[18] <- "isFive"
colnames(newTrain)[19] <- "isSix"
colnames(newTrain)[20] <- "isSeven"
summary(newTrain)
colnames(newTest)[14] <- "isOne"
colnames(newTest)[15] <- "isTwo"
colnames(newTest)[16] <- "isThree"
colnames(newTest)[17] <- "isFour"
colnames(newTest)[18] <- "isFive"
colnames(newTest)[19] <- "isSix"
colnames(newTest)[20] <- "isSeven"
summary(newTest)
save.image("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/R x64 3.1.2.lnk.RData")
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="multinomial")
formula
formula <- isOne + isTwo + isThree + isFour + isFive + isSix + isSeven ~ Elevation + Aspect + Slope +
Horizontal_Distance_To_Hydrology + Vertical_Distance_To_Hydrology +
Horizontal_Distance_To_Roadways + Hillshade_9am + Hillshade_Noon +
Hillshade_3pm + Horizontal_Distance_To_Fire_Points + Wild +
Soil
formula
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="multinomial")
class(dimnames(newTrain))
newTrain[1,]
formula
?gbm
class(newTrain)
data(iris)
class(iris)
head(iris)
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="multinomial")
summary(iris)
summary(newTrain)
formula
formula <- isOne~
Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +  Wild + Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="bernoulli")
onePrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
summary(newTest)
colnames(newTest)[12] <- "Wild"
colnames(newTest)[13] <- "Soil"
summary(newTest)
onePrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
head(onePrediction)
tail(onePrediction)
which(onePrediction > 0.5)
which(onePrediction > 0.1303042)
onePrediction[5020]
onePrediction[600]
onePrediction[700]
which(onePrediction > 0.1306042)
onePrediction[9989]
which(onePrediction > 0.14)
onePrediction[27068]
onePrediction[27069]
onePrediction[30000]
onePrediction[8754]
formula
formula <- isTwo ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="bernoulli")
twoPrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
head(twoPrediction)
tail(twoPrediction)
formula <- isThree ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="bernoulli")
threePrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
formula <- isFour ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="bernoulli")
fourPrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
formula <- isFive ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="bernoulli")
fivePrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
formula <- isSix ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="bernoulli")
sixPrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
formula <- isSeven ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
gfModel<- gbm(formula,data=newTrain,n.trees=100,interaction.depth=2,distribution="bernoulli")
sevenPrediction <- predict.gbm(gfModel,newTest,type="response",n.trees=100)
prob <- cbind(prob,onePrediction)
prob <- onePrediction
prob <- cbind(prob,twoPrediction)
prob <- cbind(prob,threePrediction)
prob <- cbind(prob,fourPrediction)
prob <- cbind(prob,fivePrediction)
prob <- cbind(prob,sixPrediction)
prob <- cbind(prob,sevenPrediction)
head(prob)
tail(prob)
maxidx <- function(arr){return (which(arr==max(arr)))}
idx <- apply(prob,1,maxidx)
gfPrediction <- c(1,2,3,4,5,6,7)[idx]
head(gfPrediction)
table(gfPrediction)
submit <- data.frame(Id=test$Id,Cover_Type=gfPrediction)
write.csv(submit,'gfPred.csv',row.names=FALSE)
setwd("C:/Users/deepsidhpura777/Desktop/R/Forest Cover")
write.csv(submit,'gfPred.csv',row.names=FALSE)
formula
formula <- Cover_Type ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
rfModel <- randomForest(formula,data=newTrain,nTree=200)
library(randomForest)
rfModel <- randomForest(formula,data=newTrain,nTree=200)
prediction <- predict(rfModel,newdata=newTest,type='class')
table(prediction)
formula <- as.factor(Cover_Type) ~ Elevation + Aspect + Slope + Horizontal_Distance_To_Hydrology +
Vertical_Distance_To_Hydrology + Horizontal_Distance_To_Roadways +
Hillshade_9am + Hillshade_Noon + Hillshade_3pm + Horizontal_Distance_To_Fire_Points +
Wild + Soil
rfModel <- randomForest(formula,data=newTrain,nTree=200)
prediction <- predict(rfModel,newdata=newTest,type='class')
table(prediction)
submit <- data.frame(Id=test$Id,Cover_Type=prediction)
write.csv(submit,'RF5.csv',row.names=FALSE)
rfModel <- randomForest(formula,data=newTrain,nTree=300)
prediction <- predict(rfModel,newdata=newTest,type='class')
table(prediction)
submit <- data.frame(Id=test$Id,Cover_Type=prediction)
write.csv(submit,'RF6.csv',row.names=FALSE)
rm(prob)
rm(iris)
rm(newCol)
rm(gfPrediction)
rm(onePrediction)
rm(twoPrediction)
rm(threePrediction)
rm(fourPrediction)
rm(fivePrediction)
rm(sixPrediction)
rm(sevenPrediction)
rm(gfModel)
save.image("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/WorkSpace3.RData")
summary(newTrain)
class(colnames(train)[11])
install.packages("caret")
library(caret)
x_vars <- setdiff(names(newTrain),c("Cover_Type"))
x_vars
grid <- expand.grid(n.trees=c(250),interaction.depth=c(22),shrinkage=0.2)
fitControl <- trainControl(method="none",classProbs=TRUE)
set.seed(1805)
formula
set.seed(1800)
gfModel <- train(formula,data=newTrain,method="gbm",trControl=fitControl,verbose=TRUE,tuneGrid=Grid,metric="ROC")
gfModel <- train(formula,data=newTrain,method="gbm",trControl=fitControl,verbose=TRUE,tuneGrid=grid,metric="ROC")
confusionMatrix(gfModel,newTrain$Cover_Type)
gfPred <- predict(gfModel,newdata=newTest[,x_vars])
table(gfPred)
submission <- data.frame(Id=test$Id,Cover_Type=gfPred)
write.csv(submit,"GF.csv",row.names=FALSE)
table(prediction)
?train
?predict
savehistory("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/HistoryL.Rhistory")
