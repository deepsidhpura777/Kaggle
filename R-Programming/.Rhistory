model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.5),balance_classes=TRUE,hidden=c(9),epochs=100)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.5,0.5,0.5),balance_classes=TRUE,hidden=c(9,9,9),epochs=100)
predict <- h2o.predict(model,test_h2o)
head(predict)
p <- predict[,2:9]
head(p)
p <- predict[,2:10]
head(p)
p <- data.frame(p)
tail(p)
head(p)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.5,0.5,0.5),balance_classes=TRUE,hidden=c(50,50,50),epochs=500)
predict <- h2o.predict(model,test_h2o)
head(predict)
tail(predict)
p <- predict[,2:10]
submit <- cbind(id,predict)
colnames(p)
predict[1,] <- id
head(predict)
p <- h2o.cbind(id,p)
>h2o.cbind
?h2o.cbind
p <- cbind.H2OParsedData(id,p)
i <- as.h2o(localH2O,id,'id')
p <- cbind.H2OParsedData(i,p)
head(p)
colnames(p)[1] <- 'id'
head(p)
write.csv(p,"deep.csv",row.names=FALSE)
p <- as.data.frame(p)
tail(p)
write.csv(p,"deep.csv",row.names=FALSE)
setwd("C:/Users/deepsidhpura777/Desktop/R/Otto")
write.csv(p,"deep.csv",row.names=FALSE)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.2,0.2,0.2),balance_classes=TRUE,hidden=c(15,15,15),epochs=200)
predict_2 <- predict(model,test_h2o)
predict_2 <- h2o.predict(model,test_h2o)
head(predict_2)
head(predict)
tail(predict_2)
predict_2[10000,]
table(predict_2)
predict_2 <- as.data.frame(predeict_2)
predict_2 <- as.data.frame(predict_2)
summary(predict_2)
predict_2[,1] <- id
head(predict_2)
write.csv(predict_2,"deep_1.csv",row.names=FALSE)
colnames(predict_2)
colnames(predict_2)[1] <- 'id'
write.csv(predict_2,"deep_1.csv",row.names=FALSE)
colnames(predict_2)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="Tanh",balance_classes=TRUE,hidden=c(50,50,50),epochs=500)
pr <- predict(model,test_h2o)
pr <- h2o.predict(model,test_h2o)
head(pr)
pr <- as.data.frame(pr[,-1])
head(pr)
pr <- cbind(id,pr)
head(pr)
write.csv(pr,"deep_2.csv",row.names=FALSE)
?h2o
?h2o.deeplearning
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="Tanh",balance_classes=TRUE,hidden=c(500),epochs=200,l2)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="Tanh",balance_classes=TRUE,hidden=c(500),epochs=300,l2=0.5)
summary(train)
source('C:/Users/deepsidhpura777/Desktop/R/liberty.R')
install.packages("C:/Users/deepsidhpura777/Downloads/readr-master.zip", repos = NULL)
source('C:/Users/deepsidhpura777/Desktop/R/liberty.R')
source('C:/Users/deepsidhpura777/Desktop/Python/Rossmann Sales/xgb_R.R')
library(h2o)
h2o
2+5
mylist = list("Deep",1,2,3)
mylist
mylist[1]
mylist[[1]]
mylist = list(C(1,2,3,4),5,6,7)
c(1,2,3,4)
v = c(1,2,3,4)
v[1]
mylist = list(v,5,6,7)
mylist[[1]]
d = mylist[[1]]
d = mylist[1]
d[1]
for i,j in seq_along(10){}
for i in seq_along(10){}
for(i,j in seq_along(10)){}
for(i in seq_along(10)){}
for(i in seq_along(10)){ i }
for(i in seq_along(10)){ print(i) }
for(i in seq_along(10,1)){ print(i) }
for(i in seq_len(10)){ print(i) }
for(i in seq_along(v)){ print(i) }
c = data.frame("Name" = character,"Surname" = character)
c = data.frame(Name = character,Surname = character)
c <- data.frame(Name = character,Surname = character)
c <- data.frame(Name,Surname)
d <- data.frame()
d <- data.frame(name,surname)
c <- data.frame(Name = "",Surname = "")
c$Name
c[1,] <- c('Deep','Sidhpura')
c[1,]
c$Name <- "Deep"
c$Surname <- "Sidhpura"
c
c[1,]
colnames(c)
c <- data.frame(Name = "Deep",Surname = "Sidhpura")
c
c[2,] <- data.frame(Name="Nidhi",Surname = "Sidhpura")
c[1,]
s <- c[1,]
s
colnames(c)
1 == 1
c["Name"]
c$Name
c
c[2,1] <- "Nidhi"
c$Name[2] <- "Nidhi"
c$Name
c$Name(1)
c$Name[1]
c$Name[2] <- "Nidhi"
c$Name[1] <- "Nidhi"
"Deep"
c$Name[1] = "Nidhi"
c
c$Name <- as.character(c$Name)
c$Name[1] <- "Deep"
c
c$Name[2] <- "Nidhi"
c
d = data.frame(Name = "Deep",Last = "Sidhpura")
d
class(d$Name)
class(1)
d$Name[2] <- as.factor("Nidhi")
d
d$Name <- as.character(d$Name)
d$Name[2] <- "Nidhi"
d
c
d
rbind(d,data.frame(Name="Nidhi",Last = "Sud"))
rbind(d,data.frame(Name="Daksha",Last = "Sidhpura"))
d = rbind(d,data.frame(Name="Daksha",Last = "Sidhpura"))
d
nrow(d)
colnames(d)
x <- c(1,2,3,4,5)
attribute(x)
attributes(x)
length(x)
x[1]
print (x[1])
y <- 1:5
y
for(i in seq_along(y)){ print (i)}
length(y)
z <- vector("numeric",length = 10)
z[1] <- 5.5
z
z[2] <- 5
z
class(x)
attributes(x)
class(y)
as.numeric(y)
as.logical(y)
y <- 0:5 ## Another way of creating a sequence
class(y)
as.logical(y)
m <- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
m$dim
x
x <- List(1,"a",TRUE,1+4i)
x <- list(1,"a",TRUE,1+4i)
x[1]
x[[1,1]]
x[[1]]
x <- list(1:3,"a",TRUE,1+4i)
x
x[1]
x[[1,1]]
x[[1]]
x <- factor(c("Male","Female","Male","Female"))
x
table(x)
unclass(x)
x
x[1]
as.integer(x)
x <- c(1,2,3,NA,4,NA)
is.na(x)
x <- data.frame(Name = "Deep", Surname = "Sidhpura")
x
x <- data.frame(ID = 1:4, Name = c("Naruto","Sasuke","Itachi","Madara"), Surname = c("Uzumaki","Uchiha","Uchiha","Uchiha"))
x
attributes(x)
colnames(x)
names(x)
load(iris)
data(iris)
iris
table(species)
table(iris$Species)
summary(iris)
summary(iris)
setosa <- iris[iris$Species == "setosa"]
setosa <- iris[as.integer(iris$Species == "setosa")]
setosa
setosa <- iris$Species == "setosa"
table(setosa)
set <- as.integer(setosa)
i <- iris[set,]
summary(i)
table(i$Species)
i
setosa <- iris[iris$Species == "setosa",]
summary(setosa)
x <- c(1,2,3,4,5)
print (x)
length(x)
print (x[1]) ### Indexing begins with 1
print (x[x > 2])
iris[1,]
m <- matrix(1:6,nrow = 2,ncol = 3)
m[1:2,]
print (m[,1])
m
x <- list(foo = 1:4,bar = 0.6)
x$foo
x[1]
x[[c(1,2)]]
x[[1]]
x[[1]][2]
x[[1,2]]
x <- data.frame(ID = 1:4, Name = c("Naruto","Sasuke","Itachi","Madara"), Surname = c("Uzumaki","Uchiha","Uchiha","Uchiha"))
nrow(x)
ncol(x)
colnames(x)
x$ID
x["Name"]
x <- list(1,"a",TRUE,1+4i)
print (x)
x <- list(foo = 1:4,bar = 0.6)
print (x$foo)
x[1]
x[[1]]
print ( x[[1]] )
print ( x[[c(1,3)]] )
x$foo
setwd("C:/Users/deepsidhpura777/Desktop/R")
airquality <- read.csv("hw1_data.csv")
summary(airquality)
head(airquality)
summary(airquality)
airquality$Ozone
colnames(airquality)
colnames(airquality)
airquality$Ozone
ozoneNA <- airquality$Ozone == NA
ozoneNA <- airquality$Ozone == "NA"
ozoneNA <- airquality$Ozone == NA
airquality$Ozone
airquality$Ozone[5]
airquality$Ozone[5] == NA
airquality$Ozone[5] == "NA"
ozoneNA <- is.na(airquality$Ozone)
ozoneNA <- where(is.na(airquality$Ozone))
which(ozoneNA)
airquality$Ozone[which(ozoneNA)] <- ""
airquality$Ozone
airquality$Ozone[which(ozoneNA)] <- 0
airquality$Ozone
airquality <- read.csv("hw1_data.csv")
airquality$Ozone[which(ozoneNA)] <- 0
summary(airquality)
airquality$Ozone
lapply(mean,airquality$Ozone)
lapply(airquality$Ozone,meam)
lapply(airquality$Ozone,mean)
lapply(airquality$Ozone,colmean)
mean(airquality$Ozone)
summary(airquality)
x <- 1:4
y <- 10:14
print (x + y)
x <- 1:5
y <- 10:14
print (x + y)
x <- matrix(1:6,nrow = 2,ncol = 3)
y <- matrix(1:15,nrow = 3,ncol = 5)
print (x %*% y)
print (x * x)
x <- 5
if (x > 3){
y <- 10
}
else{
y <- 0
}
x <- 5
if (x > 3){
y <- 10
}else{
y <- 0
}
y
if (x > 3){
y <- 10
}else{
y <- 0
}
y <- if(x > 3){
10
}else{
0
}
y
for(i in 1:10){
print (i)
}
x <- c("Naruto","Sakura","Sasuke","Hinata")
for(i in seq_along(x)){
print (i)
}
x <- c("Naruto","Sakura","Sasuke","Hinata")
for(i in seq_along(x)){
print (x[i])
}
for(i in seq_length(5)){
print (i)
}
for(i in seq_len(5)){
print (i)
}
for(i in seq_len(5)){   ### Creates a sequence of the length of the passed value
print (i)
}
for(i in x){
print (i)
}
count <- 0
while (count < 5){
print (count)
count <- count + 1
}
f <- function(a=3,b=5){
a+b
}
ans = f()
ans
myFunction <- function(a=3,b=5){
a+b
}
ans <- myFunction(100,200)
ans
lapply(airquality$Ozone,mean)
v <- airquality$Ozone
lapply(v,mean)
v <- split(airquality,airquality$Ozone)
v
head(v)
v <- airquality$Ozone
mean(v)
v <- list(v)
v
lapply(v,mean)
v <- airquality$Ozone
class(v)
v[1]
v1 <- list(v)
v1[1]
l <- list(1,2,3,4,5)
lapply(l,mean)
l[1]
l <- list(1,2,3,4,5)
l <- list(c(1,2,3,4,5))
sapply(airquality$Ozone,mean)
sapply(list(airquality$Ozone),mean)
l <- list(foo = 1:5,bar = 1:10)
sapply(l,mean)
sapply(airquality,mean)
summary(airquality)
summary(airquality)
solarNA <- which(is.na(airquality$Solar.R))
airquality$Solar.R[solarNA] <- 0
sapply(airquality,mean)
lapply(airquality,mean)
sapply(airquality,mean)
s <- split(airquality$Ozone)
s <- split(airquality$Ozone,mean)
s <- split(airquality,airquality$Ozone)
lapply(s,mean)
s
s$Ozone
s
s$Solar.R
sapply(s,mean)
summary(s)
m <- matrix(1:6,nrow = 2,ncol = 3)
m
apply(m,1,mean)
apply(m,1,sum)
apply(m,2,sum)
colMeans(airquality)
apply(m[1],1,mean)
apply(m,1,mean)
rowSums(airquality)
apply(airquality,2,mean)
rowmean <- rowMeans(airquality)
dim(airquality)
rowMeans(m,dims=2)
m
mapply(mean,airquality,v1)
mapply(mean,airquality)
s <- split(airquality,airquality$Ozone)
s <- split(airquality,airquality$Month)
s
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
mean(airquality)
s[1]
lapply(s[1],colMeans)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s,colMeans)
lapply(s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
mean(airquality$Month)
splitByMonth <- split(airquality,airquality$Month)
avgByMonth <- lappy(splitByMonth,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
splitByMonth <- split(airquality,airquality$Month)
avgByMonth <- lapply(splitByMonth,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
avgByMonth
data(iris)
dim(iris)
Xtrain <- iris[1:100,]
train <- iris[1:100,]
x <- 1:5
x[-5]
x[-5:]
iris
h <- sample(150)
h
iris <- iris[h,]
iris
iris[1]
iris[1,]
h <- sample(150)
iris <- iris[h,]
train <- iris[1:100,]
test <- iris[-c(1:100),]
tail(test)
tail(iris)
library(e1071)
model <- naiveBayes(Species~.,data = train)
prediction <- predict(model,test[,-5])
table(prediction)
table(test[,5])
test[,5]
prediction
sample(5)
sample(5,3)
sample(5,2)
View(test)
View(test)
View(train)
View(train)
colnames(train)
data(iris)
dim(iris)
h <- sample(150)
iris <- iris[h,]
train <- iris[1:100,]
test <- iris[-c(1:100),]
library(e1071)
colnames(train)
model <- naiveBayes(Species~.,data = train)
prediction <- predict(model,test[,-5])
table(prediction)
table(test[,5])
test == train
data(iris)
dim(iris)
#h <- sample(150)
#iris <- iris[h,]
train <- iris[1:100,]
test <- iris[-c(1:100),]
library(e1071)
colnames(train)
model <- naiveBayes(Species~.,data = train)
prediction <- predict(model,test[,-5])
table(prediction)
data(iris)
dim(iris)
h <- sample(150)
iris <- iris[h,]
train <- iris[1:100,]
test <- iris[-c(1:100),]
library(e1071)
colnames(train)
model <- naiveBayes(Species~.,data = train)
prediction <- predict(model,test[,-5])
table(prediction)
table(test[,5])
