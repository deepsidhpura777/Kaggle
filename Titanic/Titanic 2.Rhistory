library(datasets)
data(iris)
?iris
iris
i<-iris["Species"==virginica]
i<-iris["Species"=="virginica"]
i
i<-iris[iris[6]==virginica]
iris[6]
i<-iris[iris[5]==virginica]
i<-iris[iris[5]=="virginica"]
i
nrow(i)
nrows(i)
length(i)
i<-iris[6]=="virginica"
i<-iris[5]=="virginica"
i<-iris[i]
i<-iris[5]=="virginica"
i<-iris[i,]
i
mean(i[,1])
library(datasets)
data(mtcars)
?mtcars
mtcars[1:5,]
c<-mtcars[1:5,]
mean(c$mpg,c$cyl)
apply(c,2,mean)
split(c,c$cyl)
with(c,tapply(mpg,cyl,mean))
tapply(mpg,cyl,mean)
a<-with(c,tapply(hp,cyl,mean))
a
colnames(a)
f1<-c["cyl"==4]
f2<-c["cyl"==8]
split(c,f1)
f1
c[c[,4]==4]
c[c[,2]==4]
s<-split(c,c$cyl)
s[1]
s[[1],2]
s[[1,2]]
[s[1],4]
s[1]$hp
s[1]$mpg
s[[c(1,4)]]
lapply(s,mean)
s
lapply(s[c[,4]],mean)
sapply(s,function(x) colMeans(x[,c("hp")]))
sapply(s,function(x) mean(x[,c("hp")]))
s
s<-split(mtcars,mtcars$cyl)
a<-sapply(s,function(x) mean(x[,c("hp")]))
a
colname(a)
colnames(a)
a$4
a[1]
a[3]-a[1]
length(a)
which(names(a)==4)
which(names(a)==8)
tapply(iris$species,mean)
?iris
tapply(iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
iris[,"Species"]
iris[1,"Species"]
iris[1,iris$species]
iris[,4]
iris
iris[1]
iris[1,]
s
a<-sapply(s,function(x) mean(x[,"hp"]))
a
a[3]-a[1]
savehistory("C:/Users/deepsidhpura777/Desktop/R/Quiz 3.Rhistory")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo = 11,bar =2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE==TRUE)==FALSE
6==7
6 <7
10<=10
5 != 7
!(5 == 7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6!=8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
cls_vector
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flags_colors)
head(flag_colors)
lappy(flag_colors,sum)
lapply(flag_colors,sum)
sum(flag_colors)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flags_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
taplly(flags$population,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,repalce=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
filps<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100,prob=0,7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
flips2 <- rbinom(100,size=2,prob=0.7)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quaters(t2)
quarters(t2)
t3<-"October 17,1986 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",xlab='Speed,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
play()
nxt(0)
play()
nxt()
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab='Speed,ylab="Stopping Distance")
nxt()
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",subtitle="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
?hist
setwd("C:/Users/deepsidhpura777/Desktop/R/Titanic")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
test$Survived <- 0
combi <- rbind(train,test)
combi$Name[1]
class(combi$Name[1])
combi$Name <- as.character(combi$Name)
strsplit(combi$Name[1],split='[,.]')
strsplit(combi$Name[1],split='[,.]')[[1]][2]
combi$Title <- sapply(combi$Name,FUN=function(x){strsplit(x,split='[,.]')[[1]][2]})
combi$Title <- sub(' ','',combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c('Mlle','Mme')] <- 'Mlle'
table(combi$Title)
combi$Title[combi$Title %in% c('Capt','Don','Major','Sir')] <- 'Sir'
combi$Title[combi$Title %in% c('Jonkheer','Dona','the Countess','Lady')] <- 'Lady'
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name,FUN=function(x){strsplit(x,split='[,.]')[[1]][1]})
head(combi$Surname)
combi$FamilyID <- paste(as.character(combi$FamilySize),combi$Surname,sep="")
combi$FamilyID[combi$FamilySize <=2] <- 'Small'
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
head(famIDs)
famIDs <- famIDs[famIDs$Freq <= 2]
famIDs <- famIDs[famIDs$Freq <= 2,]
head(famIDs)
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891,]
test <- combi[892:1309,]
colnames(combi)
summary(combi)
library(rpart)
Agefit <- rpart(Age~Pclass+Sex+SibSp+Parch+Fare+Embarked+Title+FamilySize,data=combi[!is.na(combi$Age),],method="anova")
combi$Age[is.na(combi$Age)] <- predict(Agefit,combi[is.na(combi$Age),])
summary(combi)
combi$Embarked[c(62,830)] = "S"
combi$Embarked <- factor(combi$Embarked)
combi$Fare[1044] <- median(combi$Fare,na.rm=TRUE)
train <- combi[1:891,]
test <- combi[892:1309,]
library(e1071)
tune <- tune.svm(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,gamma=10^(-6:-1),cost=10^(1:4))
summary(tune)
svmModel <- svm(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,method="C-classification",kernel="radial",probability=T,gamma=0.1,cost=10)
svmPrediction <- predict(svmModel,test)
head(prediction)
head(svmPrediction)
svmModel <- svm(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,method="C-classification",kernel="radial",probability=T,gamma=0.1,cost=10)
svmPrediction <- predict(svmModel,test)
head(svmPrediction)
svmPrediction
submit <- data.frame(PassengerId=test$PassengerId,Survived=svmPrediction)
write.csv(submit,file="svmPred2.csv",row.names=FALSE)
fit <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,method="class")
desPrediction <- predict(fit,test,type="class")
submit <- data.frame(PassengerId=test$PassengerId,Survived=desPrediction)
write.csv(submit,"desTree.csv",row.names=FALSE)
length(desPrediction)
library(neuralnet)
nn <- neuralnet(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,hidden=1)
nn <- neuralnet(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,hidden=1)
class(train$Embarked)
class(train$Pclass)
class(train$Title)
class(train$FamilySize)
class(train$FamilyID)
?model.matrix
m<-model.matrix(~Survived + Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyId,data=train)
m<-model.matrix(~Survived + Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train)
nn <- neuralnet(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=m,hidden=1)
colnames(m)
nn <- neuralnet(Survived~Pclass+Sexmale+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=m,hidden=1)
nn <- neuralnet(Survived~Pclass+Sexmale+Age+SibSp+Parch+Fare+EmbarkedS+EmbarkedQ+Title+FamilySize+FamilyID,data=m,hidden=1)
nn <- neuralnet(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train,hidden=1)
m<-model.matrix(~Survived + Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train)
colnames(m)
m<-model.matrix(~Survived + Pclass+Sexmale+Age+SibSp+Parch+Fare+EmbarkedS+EmbarkedQ,data=train)
m<-model.matrix(~Survived + Pclass+Sexmale+Age+SibSp+Parch+Fare+EmbarkedS+EmbarkedQ,data=train)
colnames(m)
nn <- neuralnet(Survived~Pclass+Sexmale+Age+SibSp+Parch+Fare+EmbarkedS+EmbarkedQ,data=m,hidden=1)
nnPrediction <- compute(nn,test$Survived)$net.result
t<-model.matrix(~Survived + Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=test)
nnPrediction <- compute(nn,t$Survived)$net.result
colnames[t]
colnames(t)
nnPrediction <- compute(nn,t[-2])$net.result
nn <- neuralnet(Survived~Pclass+Sexmale+Age+SibSp+Parch+Fare+EmbarkedS+EmbarkedQ,data=m,hidden=10)
nn <- neuralnet(Survived~Pclass+Sexmale+Age+SibSp+Parch+Fare+EmbarkedS+EmbarkedQ,data=m,hidden=1)
nnPrediction <- compute(nn,t[-2])$net.result
summary(nn)
plot(nn)
nnPrediction <- compute(nn,t)$net.result
nnPrediction <- compute(nn,test[-2])$net.result
t[-2]
t[1,1]
m[1,1]
nnPrediction <- compute(nn,test[-2])$net.result
nnPrediction <- compute(nn,t[-2])$net.result
colnames(t[2])
colnames(t)
ncol(t)
m<-model.matrix(~Survived+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train)
nn <- neuralnet(Survived~Pclass+Sexmale+Age+SibSp+Parch+Fare+EmbarkedS+EmbarkedQ,data=m,hidden=1)
t<-model.matrix(~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=test)
nnPrediction <- compute(nn,t[-2])$net.result
t<-model.matrix(~Survived+Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=test)
nnPrediction <- compute(nn,t[-2])$net.result
is.na(t)
nnPrediction <- compute(nn,t[-2])$net.result
nModel <- naiveBayes(Survived~Pclass+Sexmale+Age+SibSp+Parch+Fare+Embarked+Title+Familysize+FamilyID,data=train)
nModel <- naiveBayes(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+Familysize+FamilyID,data=train)
nModel <- naiveBayes(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train)
colnames(test)
nPrediction <- predict(nModel,test[-2])
head(nPrediction)
nPrediction
is.na(test)
nModel <- naiveBayes(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train)
nPrediction <- predict(nModel,test)
length(nPrediction)
nModel <- naiveBayes(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train)
nPrediction <- predict(nModel,test[-2])
nModel <- naiveBayes(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked,data=train)
nPrediction <- predict(nModel,test[-2])
nPrediction
nModel <- naiveBayes(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train)
nPrediction <- predict(nModel,test[-2])
length(nPrediction)
submit <- data.frame(PassengerId=test$PassenegrId,Survived=nPrediction)
submit <- data.frame(PassengerId=test$PassengerId,Survived=nPrediction)
write.csv(submit,"NaiveBayes.csv",row.names=FALSE)
class(train$Survived)
library(gbm)
gModel <- gbm(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,n.trees=1000,distribution="bernoulli")
gPrediction <- predict.gbm(gModel,test,type="response",n.trees=1000)
length(gPrediction)
head(gPrediction)
gPrediction
gPrediction <- gPrediction > 0.5
gPrediction
gPrediction <- as.numeric(gPreediction)
gPrediction <- as.numeric(gPrediction)
head(gPrediction)
submit <- data.frame(PassengerId=test$PassenegrId,Survived=gPrediction)
length(gPrediction)
submit <- data.frame(PassengerId=test$PassengerId,Survived=gPrediction)
write.csv(submit,"GradTrees.csv",row.names=FALSE)
?gbm
gModel <- gbm(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,n.trees=3000,shrinkage=0.1,distribution="bernoulli")
gPrediction <- predict.gbm(gModel,test,type="response",n.trees=3000)
gPrediction <- gPrediction > 0.5
head(gPrediction)
gPrediction <- as.numeric(gPreediction)
gPrediction <- as.numeric(gPrediction)
submit <- data.frame(PassengerId=test$PassengerId,Survived=gPrediction)
write.csv(submit,"GradTrees.csv",row.names=FALSE)
install.packages('party')
cfModel <- cforest(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,controls=cforest_unbiased(ntree=2000,mtry=3))
library(party)
cfModel <- cforest(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID,data=train,controls=cforest_unbiased(ntree=2000,mtry=3))
cfPrediction <- predict(fit,test,OOB=TRUE,type="response")
cfPrediction <- predict(cfModel,test,OOB=TRUE,type="response")
submit <- data.frame(PassengerId=test$PassengerId,Survived=cfPrediction)
write.csv(submit,"ConTrees.csv",row.names=FALSE)
summary(train)
class(train$Cabin)
cfModel <- cforest(as.factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FamilySize+FamilyID+Cabin,data=train,controls=cforest_unbiased(ntree=2000,mtry=3))
cfPrediction <- predict(cfModel,test,OOB=TRUE,type="response")
submit <- data.frame(PassengerId=test$PassengerId,Survived=cfPrediction)
write.csv(submit,"ConTrees.csv",row.names=FALSE)
savehistory("C:/Users/deepsidhpura777/Desktop/R/Titanic/Titanic 2.Rhistory")
