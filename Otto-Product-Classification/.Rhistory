library(datasets)
data(iris)
?iris
iris
i<-iris["Species"==virginica]
i<-iris["Species"=="virginica"]
i
i<-iris[iris[6]==virginica]
iris[6]
i<-iris[iris[5]==virginica]
i<-iris[iris[5]=="virginica"]
i
nrow(i)
nrows(i)
length(i)
i<-iris[6]=="virginica"
i<-iris[5]=="virginica"
i<-iris[i]
i<-iris[5]=="virginica"
i<-iris[i,]
i
mean(i[,1])
library(datasets)
data(mtcars)
?mtcars
mtcars[1:5,]
c<-mtcars[1:5,]
mean(c$mpg,c$cyl)
apply(c,2,mean)
split(c,c$cyl)
with(c,tapply(mpg,cyl,mean))
tapply(mpg,cyl,mean)
a<-with(c,tapply(hp,cyl,mean))
a
colnames(a)
f1<-c["cyl"==4]
f2<-c["cyl"==8]
split(c,f1)
f1
c[c[,4]==4]
c[c[,2]==4]
s<-split(c,c$cyl)
s[1]
s[[1],2]
s[[1,2]]
[s[1],4]
s[1]$hp
s[1]$mpg
s[[c(1,4)]]
lapply(s,mean)
s
lapply(s[c[,4]],mean)
sapply(s,function(x) colMeans(x[,c("hp")]))
sapply(s,function(x) mean(x[,c("hp")]))
s
s<-split(mtcars,mtcars$cyl)
a<-sapply(s,function(x) mean(x[,c("hp")]))
a
colname(a)
colnames(a)
a$4
a[1]
a[3]-a[1]
length(a)
which(names(a)==4)
which(names(a)==8)
tapply(iris$species,mean)
?iris
tapply(iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
iris[,"Species"]
iris[1,"Species"]
iris[1,iris$species]
iris[,4]
iris
iris[1]
iris[1,]
s
a<-sapply(s,function(x) mean(x[,"hp"]))
a
a[3]-a[1]
savehistory("C:/Users/deepsidhpura777/Desktop/R/Quiz 3.Rhistory")
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf - inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo = 11,bar =2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(my_matrix,patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE==TRUE)==FALSE
6==7
6 <7
10<=10
5 != 7
!(5 == 7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6!=8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
cls_vector
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flags_colors)
head(flag_colors)
lappy(flag_colors,sum)
lapply(flag_colors,sum)
sum(flag_colors)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flags_shapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
taplly(flags$population,flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace=FALSE)
sample(1:20,10,replace=FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,repalce=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
filps<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(1,size=100,prob=0,7)
flips2 <- rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
flips2 <- rbinom(100,size=2,prob=0.7)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quaters(t2)
quarters(t2)
t3<-"October 17,1986 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",xlab='Speed,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
play()
nxt(0)
play()
nxt()
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab='Speed,ylab="Stopping Distance")
nxt()
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",subtitle="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
?hist
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env3.RData")
x_vars
gfPrediction <- predict(gfModel,newdata=test[,x_vars])
table(gfPrediction)
head(gfModel)
summary(test)
summary(train)
test$target <- as.factor(test$target)
summary(test)
gfPrediction <- predict(gfModel,newdata=test[,x_vars])
table(gfPrediction)
summary(test)
colnames(test)[93]
colnames(test)[94]
temptest <- test[,-(94:103)]
gfPrediction <- predict(gfModel,newdata=temptest)
gfPrediction <- predict(gfModel,newdata=test[,-94])
table(gfPrediction)
rm(temptest)
summary(gfModel)
summary(test)
load("C:/Users/deepsidhpura777/Desktop/R/Forest Cover/LatEnv.RData")
summary(newTest)
class(newTrain$Cover_Type)
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env4.RData")
grid
grid <-  expand.grid(
n.trees = c(250),
interaction.depth = 2 ,
shrinkage = 0.2)
gfModel <- train(formula,method="gbm",trControl=fitControl,tuneGrid=grid,metric="ROC")
library(caret)
gfModel <- train(formula,method="gbm",trControl=fitControl,tuneGrid=grid,metric="ROC")
gfModel <- train(formula,data=train,method="gbm",trControl=fitControl,tuneGrid=grid,metric="ROC")
gfPredict <- predict(gfModel,newdata=test[,x_vars])
table(gfPredict)
table(gfPredict)
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env1+.RData")
rm(newCOls)
rm(newCols)
rm(submit)
rm(GCtorture)
prediction <- predict(fit,test,OOB=TRUE,type="response")
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env1+.RData")
prediction <- predict(fit,test,OOB=TRUE,type="response")
library(h2o)
localH2O <- h2o.init(ip="localhost",port=12345,startH2O=TRUE,max_mem_size='2g')
localH2O <- h2o.init(ip="localhost",port=12345,startH2O=TRUE)
localH2O <- h2o.init(ip="localhost",port=55,startH2O=TRUE)
localH2O <- h2o.init(ip="localhost",port=54321,startH2O=TRUE)
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env1.RData")
test$target <- 'Class_2'
test$target <- as.factor(test$target)
train_h2o <- as.h2o(localH2O,train,key='train')
test_h2o <- as.h2o(localH2O,test,key='test')
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.5),balance_classes=TRUE,hidden=c(9),epochs=100)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.5,0.5,0.5),balance_classes=TRUE,hidden=c(9,9,9),epochs=100)
predict <- h2o.predict(model,test_h2o)
head(predict)
p <- predict[,2:9]
head(p)
p <- predict[,2:10]
head(p)
p <- data.frame(p)
tail(p)
head(p)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.5,0.5,0.5),balance_classes=TRUE,hidden=c(50,50,50),epochs=500)
predict <- h2o.predict(model,test_h2o)
head(predict)
tail(predict)
p <- predict[,2:10]
submit <- cbind(id,predict)
colnames(p)
predict[1,] <- id
head(predict)
p <- h2o.cbind(id,p)
>h2o.cbind
?h2o.cbind
p <- cbind.H2OParsedData(id,p)
i <- as.h2o(localH2O,id,'id')
p <- cbind.H2OParsedData(i,p)
head(p)
colnames(p)[1] <- 'id'
head(p)
write.csv(p,"deep.csv",row.names=FALSE)
p <- as.data.frame(p)
tail(p)
write.csv(p,"deep.csv",row.names=FALSE)
setwd("C:/Users/deepsidhpura777/Desktop/R/Otto")
write.csv(p,"deep.csv",row.names=FALSE)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="TanhWithDropout",input_dropout_ratio=0.1,hidden_dropout_ratios=c(0.2,0.2,0.2),balance_classes=TRUE,hidden=c(15,15,15),epochs=200)
predict_2 <- predict(model,test_h2o)
predict_2 <- h2o.predict(model,test_h2o)
head(predict_2)
head(predict)
tail(predict_2)
predict_2[10000,]
table(predict_2)
predict_2 <- as.data.frame(predeict_2)
predict_2 <- as.data.frame(predict_2)
summary(predict_2)
predict_2[,1] <- id
head(predict_2)
write.csv(predict_2,"deep_1.csv",row.names=FALSE)
colnames(predict_2)
colnames(predict_2)[1] <- 'id'
write.csv(predict_2,"deep_1.csv",row.names=FALSE)
colnames(predict_2)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="Tanh",balance_classes=TRUE,hidden=c(50,50,50),epochs=500)
pr <- predict(model,test_h2o)
pr <- h2o.predict(model,test_h2o)
head(pr)
pr <- as.data.frame(pr[,-1])
head(pr)
pr <- cbind(id,pr)
head(pr)
write.csv(pr,"deep_2.csv",row.names=FALSE)
?h2o
?h2o.deeplearning
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="Tanh",balance_classes=TRUE,hidden=c(500),epochs=200,l2)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h2o,activation="Tanh",balance_classes=TRUE,hidden=c(500),epochs=300,l2=0.5)
summary(train)
setwd("C:/Users/deepsidhpura777/Desktop/R/Otto")
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env1+.RData")
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env1.RData")
load("C:/Users/deepsidhpura777/Desktop/R/Otto/env1.RData")
local <- h2o.init(ip="localhost",port=54321,startH2O=TRUE,max_mem_size='2g')
library(h2o)
local <- h2o.init(ip="localhost",port=54321,startH2O=TRUE,max_mem_size='2g')
h2o.shutdown(localH2O)
h2o.shutdown(local)
local <- h2o.init(nthreads=-1)
train_h <- as.h2o(local,train,key='tr')
test_h <- as.h2o(local,test,key='te')
model <- h2o.deeplearning(x=1:93,y=94,data=train_h,activation="RectifierWithDropout",hidden_dropout_ratios=c(0.5,0.5),balance_classes=TRUE,hidden=c(750,400),epochs=75,nesterov_accelerated_gradient=TRUE,adaptive_rate=FALSE)
predict <- h2o.predict(model,test_h)
head(predict)
p9 <- as.data.frame(predict)
p9[,1] <- id
colnames(p9)[1] <- 'id'
head(p9)
write.csv(p9,"newH2o_9.csv",row.names=FALSE)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h,activation="RectifierWithDropout",hidden_dropout_ratios=c(0.45,0.45),balance_classes=TRUE,hidden=c(650,350),epochs=75,nesterov_accelerated_gradient=TRUE,adaptive_rate=FALSE)
predict <- h2o.predict(model,test_h)
p10 <- as.data.frame(predict)
head(p10)
p10
p10[,1] <- id
colnames(p10)[1] <- 'id'
head(p10)
write.csv(p10,"newH2o_10.csv",row.names=FALSE)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h,activation="RectifierWithDropout",hidden_dropout_ratios=c(0.5,0.5),balance_classes=TRUE,hidden=c(500,350),epochs=75,nesterov_accelerated_gradient=TRUE,adaptive_rate=FALSE)
predict <- h2o.predict(model,test_h)
head(predict)
p11 <- as.data.frame(predict)
p11[,1] <- id
colnames(p11)[1] <- 'id'
head(p11)
head(p9)
write.csv(p11,"newH2O_11.csv",row.names=FALSE)
model <- h2o.deeplearning(x=1:93,y=94,data=train_h,activation="RectifierWithDropout",hidden_dropout_ratios=c(0.5,0.5),balance_classes=TRUE,hidden=c(900,480),epochs=75,nesterov_accelerated_gradient=TRUE,adaptive_rate=FALSE)
predict <- h2o.predict(model,test_h)
head(predict)
rm(p11)
rm(p10)
p12 <- as.data.frame(predict)
p12[,1] <- id
colnames(p12)[1] <- 'id'
head(p12)
write.csv(p12,"newH2O_12.csv",row.names=FALSE)
